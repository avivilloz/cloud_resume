name: Deploy Website

on:
  workflow_call:
    inputs:
        TERRAFORM_ENV:
          type: string
          required: true
        AWS_DEFAULT_REGION:
          type: string
          required: true
    secrets:
        AWS_ACCESS_KEY_ID:
          required: true
        AWS_SECRET_ACCESS_KEY:
          required: true
        CLOUDFLARE_API_TOKEN:
          required: true
    outputs:
      API_URL: 
        value: ${{ jobs.deploy-website.outputs.API_URL }}
      WEBSITE_URL: 
        value: ${{ jobs.deploy-website.outputs.WEBSITE_URL }}

jobs:
  deploy-website:
    runs-on: ubuntu-latest

    env:
        AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        ANSIBLE_DIR: infra/ansible
        TERRAFORM_DIR: "infra/terraform"

    steps:
      - uses: actions/checkout@master

      - name: Install ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Install python libraries
        run: |
          /opt/pipx/venvs/ansible-core/bin/python -m pip install -r infra/requirements.txt
          /opt/pipx/venvs/ansible-core/bin/python -m pip freeze > requirements.txt
          cat requirements.txt

      - name: Download terraform tf files from s3 bucket using ansible
        if: ${{ success() }}
        run: |
          ansible-playbook ${{ env.ANSIBLE_DIR }}/tffiles_download.yaml \
            -e "project_base_dir=${{ github.workspace }}" \
            -e "terraform_env=${{ inputs.TERRAFORM_ENV }}"

      - name: Provision infra and backend using terraform 
        if: ${{ success() }}
        run: |
          terraform -chdir=${{ env.TERRAFORM_DIR }} init
          terraform -chdir=${{ env.TERRAFORM_DIR }} apply -auto-approve \
            -var="project_base_dir=${{ github.workspace }}"

      - name: Upload terraform tf files to s3 bucket using ansible
        if: ${{ success() }}
        run: |
          ansible-playbook ${{ env.ANSIBLE_DIR }}/tffiles_upload.yaml \
            -e "project_base_dir=${{ github.workspace }}" \
            -e "terraform_env=${{ inputs.TERRAFORM_ENV }}"

      - name: Extract values from terraform tfstate file to be 
              used in website frontend files deployment
        if: ${{ success() }}
        run: |
          echo "S3_BUCKET_NAME=$(terraform output \
            -state=${{ env.TERRAFORM_DIR }}/terraform.tfstate \
            -raw s3_bucket_name)" >> ${{ github.env }}

          echo "API_URL=$(terraform output \
            -state=${{ env.TERRAFORM_DIR }}/terraform.tfstate \
            -raw api_url)" >> ${{ github.env }}

          echo "CLOUDFRONT_DISTRIBUTION_ID=$(terraform output \
            -state=${{ env.TERRAFORM_DIR }}/terraform.tfstate \
            -raw cloudfront_distribution_id)" >> ${{ github.env }}

          echo "WEBSITE_URL=$(terraform output \
            -state=${{ env.TERRAFORM_DIR }}/terraform.tfstate \
            -raw website_url)" >> ${{ github.env }}

      - name: Deploy website frontend files to env using ansible
        if: ${{ success() }}
        run: |
          ansible-playbook ${{ env.ANSIBLE_DIR }}/website_deploy.yaml \
            -e "project_base_dir=${{ github.workspace }}" \
            -e "s3_bucket_name=$S3_BUCKET_NAME" \
            -e "api_url=$API_URL" \
            -e "cloudfront_distribution_id=$CLOUDFRONT_DISTRIBUTION_ID"

      - name: Set outputs
        id: set-outputs
        if: ${{ success() }}
        run: |
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_OUTPUT

    outputs:
      API_URL: ${{ steps.set-outputs.outputs.API_URL }}
      WEBSITE_URL: ${{ steps.set-outputs.outputs.WEBSITE_URL }}
