name: CI with Terraform, Ansible and Tests

on:
  push:
    branches: [master]
    paths:
      - 'frontend/**'

jobs:
  development-env-setup:
    runs-on: ubuntu-latest

    env:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_DEV_ENV_DIR: "infra/terraform/environments/development"
      ANSIBLE_SCRIPTS_DIR: infra/ansible

    steps:
      - uses: actions/checkout@master

      - name: Install ansible
        run: |
          sudo apt-get update && sudo apt-get install -y ansible

      - name: Install python libraries
        run: |
          /opt/pipx/venvs/ansible-core/bin/python -m pip install pytest boto3 botocore

      - name: Download terraform tf files from s3 bucket using ansible
        if: ${{ success() }}
        run: |
          ansible-playbook ${{ env.ANSIBLE_SCRIPTS_DIR }}/tffiles_download.yaml \
            -e "project_base_dir=${{ github.workspace }}"

      - name: Setup development environment using terraform 
        if: ${{ success() }}
        run: |
          terraform -chdir=${{ env.TF_DEV_ENV_DIR }} init
          terraform -chdir=${{ env.TF_DEV_ENV_DIR }} apply -auto-approve \
            -var="project_base_dir=${{ github.workspace }}"

      - name: Upload terraform tf files to s3 bucket using ansible
        if: ${{ success() }}
        run: |
          ansible-playbook ${{ env.ANSIBLE_SCRIPTS_DIR }}/tffiles_upload.yaml \
            -e "project_base_dir=${{ github.workspace }}"

      - name: Extract values from terraform tfstate file to be 
              used in website frontend files deployment
        id: extract-values
        if: ${{ success() }}
        run: |
          echo "S3_BUCKET_NAME=$(terraform output \
            -state=${{ env.TF_DEV_ENV_DIR }}/terraform.tfstate \
            -raw s3_bucket_name)" >> ${{ github.env }}

          echo "API_STAGE_ENDPOINT=$(terraform output \
            -state=${{ env.TF_DEV_ENV_DIR }}/terraform.tfstate \
            -raw api_stage_endpoint)" >> ${{ github.env }}

          echo "CLOUDFRONT_DISTRIBUTION_ID=$(terraform output \
            -state=${{ env.TF_DEV_ENV_DIR }}/terraform.tfstate \
            -raw cloudfront_distribution_id)" >> ${{ github.env }}

      - name: Deploy website frontend files to env using ansible
        if: ${{ success() }}
        run: |
          ansible-playbook ${{ env.ANSIBLE_SCRIPTS_DIR }}/website_deploy.yaml \
            -e "project_base_dir=${{ github.workspace }}" \
            -e "s3_bucket_name=$S3_BUCKET_NAME" \
            -e "api_stage_endpoint=$API_STAGE_ENDPOINT" \
            -e "cloudfront_distribution_id=$CLOUDFRONT_DISTRIBUTION_ID"
  
  backend-tests:
    needs: development-env-setup
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Install python libraries
        run: |
          /opt/pipx/venvs/ansible-core/bin/python -m pip install pytest

      - name: Run backend tests with pytest
        run: |
          echo "$API_STAGE_ENDPOINT"
        env:
          API_STAGE_ENDPOINT: ${{ needs.development-env-setup.outputs.api-stage-endpoint }}




      # - name: Extract Terraform Outputs
      #   run: |
      #     export S3_BUCKET_NAME=$(terraform output -state=tfstate s3_bucket_name)
      #     export CLOUDFRONT_ID=$(terraform output -state=tfstate cloudfront_id)
      #     export API_STAGE_ENDPOINT=$(terraform output -state=tfstate api_stage_endpoint)

      # - name: Deploy S3 Buckets with Ansible (Integration)
      #   run: |
      #     ansible-playbook deploy_s3_files.yml \
      #       -e "aws_region=your_region" \
      #       -e "s3_bucket_name=$S3_BUCKET_NAME" \
      #       -e "cloudfront_id=$CLOUDFRONT_ID" \
      #       -e "api_stage_endpoint=$API_STAGE_ENDPOINT"

      # - name: Run Frontend Tests
      #   run: |
      #     cd frontend
      #     # Replace with your frontend test command (e.g., npm test)

      # - name: Run Backend Tests
      #   run: |
      #     cd backend
      #     # Replace with your backend test command (e.g., python -m unittest)

      # - name: Destroy Terraform - Integration Environment
      #   run: |
      #     cd integration-environment
      #     terraform destroy

      # - name: Apply Terraform - Production Environment (if tests passed)
      #   if: ${{ success() }}  # Only run if previous steps succeed
      #   run: |
      #     cd production-environment
      #     terraform init
      #     terraform apply

      # - name: Deploy S3 Buckets with Ansible (Production) (if tests passed)
      #   if: ${{ success() }}  # Only run if previous steps succeed
      #   run: |
      #     ansible-playbook deploy_s3_files.yml \
      #       -e "aws_region=your_region" \
      #       -e "s3_bucket_name=$S3_BUCKET_NAME" \
      #       -e "cloudfront_id=$CLOUDFRONT_ID" \
      #       -e "api_stage_endpoint=$API_STAGE_ENDPOINT"

  # Upload your ansible playbooks to an artifact before running the workflow

